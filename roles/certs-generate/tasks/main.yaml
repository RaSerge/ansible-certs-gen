---
- name: "Check required variables"
  fail: msg="Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items: "{{required_vars}}"

- name: ensure that certs target directory exists
  file: path="{{ certsgen_output_dir }}/{{ aws_target_domain }}/{{item}}" state=directory
  with_items:
    - ssl-certs
    - nginx-confs/conf.d/domains/http
    - nginx-confs/conf.d/domains/https

- name: run cert-gen container and generate certs
  docker_container:
    name: cert_gen
    image: sergioalvares/certbot-aws-route53:0.2
    env:
      DOMAIN: "{{ aws_target_domain }}"
      EMAIL: "{{ admin_email }}"
      AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
      AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
      TZPATH: "America/Chicago"
      AWS_DEFAULT_REGION: "us-east-1"
    keep_volumes: true
    volumes:
      - "{{ certsgen_output_dir }}/{{ aws_target_domain }}/ssl-certs:/etc/letsencrypt"

- name: create nginx confs for current domain
  template:
    src: "{{ item }}/template.conf.j2"
    dest: "{{ certsgen_output_dir }}/{{ aws_target_domain }}/nginx-confs/{{ item }}/{{ aws_target_domain }}"
  with_items:
    - conf.d/domains/http
    - conf.d/domains/https

- name: Synchronization of src on the inventory host to the dest on the localhost in pull mode
  synchronize:
    mode: pull
    src: "{{ certsgen_output_dir }}/{{ aws_target_domain }}/"
    dest: "/tmp/{{ aws_target_domain }}/"
    links: yes
    recursive: yes
    delete: yes

- name: Fix permissions
  file: path="/tmp/{{ aws_target_domain }}/ssl-certs/{{ item }}" state=directory mode=0755 owner=root
  with_items:
    - live
    - archive
  tags:
    - checks
